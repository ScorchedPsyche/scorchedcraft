plugins {
	id 'java'
	id 'application'
}

//dependencies {
//	implementation(project(":scorchedcraft-fabric:core"))
//	implementation(project(":scorchedcraft-shared:core"))
//
//	implementation(project(":scorchedcraft-fabric:worlds"))
//	implementation(project(":scorchedcraft-shared:worlds"))
//}

subprojects {
	apply plugin: 'maven-publish'

	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16
}
task fabric_build (){
//	dependsOn(':scorchedcraft-fabric:fabric_clean__modules')

	dependsOn(':scorchedcraft-fabric:core:build')
	dependsOn(':scorchedcraft-fabric:portals:build')
	dependsOn(':scorchedcraft-fabric:worlds:build')
	doLast {
		task copy_mods(type: Copy){
//			def jars=[]
			def destinationDirectory = file('..\\run\\mods')
			mkdir ".out"
			def destinationDirectory2 = file('.out')
			println('Copying into:')
			println(' -- ' + destinationDirectory)
			println(' -- ' + destinationDirectory2)
			println('\nFiles:')
			subprojects.each {
//				println '================= ' + it.name + ' ================='
//				println '======== runtimeClasspath BEGIN ========'
//				it.sourceSets.main.runtimeClasspath.each {
//					if (!it.getAbsolutePath().contains('net.fabricmc')
//						&& !it.getAbsolutePath().contains('net_fabricmc')){
//						println it
//					}
//				}
//				println '======== runtimeClasspath END ========'
				def originFile = '' + it.buildDir + '\\libs\\' + it.archives_base_name + '-' + it.getVersion() + '.jar'

				println(' -- ' + originFile)

				copy {
					from(originFile)
					into(destinationDirectory)
				}
				copy {
					from(originFile)
					into(destinationDirectory2)
				}
			}
		}
	}
}

task fabric_run__client (){
	dependsOn(':scorchedcraft-fabric:fabric_build')
	finalizedBy ':scorchedcraft-fabric:core:runClient'
}

task fabric_clean__modules (){
	dependsOn(':scorchedcraft-shared:core-shared:clean')
	dependsOn(':scorchedcraft-shared:portals-shared:clean')
	dependsOn(':scorchedcraft-shared:worlds-shared:clean')

	dependsOn(':scorchedcraft-fabric:core:clean')
	dependsOn(':scorchedcraft-fabric:portals:clean')
	dependsOn(':scorchedcraft-fabric:worlds:clean')

	println "Cleaning folders"
	delete '.out'

	// Delete all folders except Loom cache
	fileTree(dir: 'build').exclude("loom_cache").visit {
		FileVisitDetails details -> delete details.file
	}
}